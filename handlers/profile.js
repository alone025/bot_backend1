const {
  UserProfile,
  Poll,
  Question,
  Connection,
  Conference,
  AccessCode,
  Message,
} = require("../database");
const {
  profileKeyboard,
  backKeyboard,
  conferenceKeyboard,
  pollKeyboard,
  adminKeyboard,
  adminMainKeyboard,
  mainKeyboard,
} = require("../utils/keyboards");
const { findMatches, calculateMatchScore } = require("../utils/matching");

const { Markup } = require("telegraf");
const QRCode = require("qrcode");

const profileHandler = (bot) => {
  // ============ START & CONFERENCE SELECTION ============
  bot.start(async (ctx) => {
    const startParams = ctx.message.text.split(" ")[1];

    // Handle QR code joins
    if (startParams && startParams.startsWith("join_")) {
      const [, conferenceCode, accessCode] = startParams.split("_");
      await handleJoinConference(ctx, conferenceCode, accessCode);
      return;
    }

    const welcomeMessage = `üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è –æ–±—â–µ–Ω–∏—è –ø–æ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è–º, ${ctx.from.first_name}!

–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å–≤—è–∑–∞—Ç—å—Å—è —Å –¥—Ä—É–≥–∏–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏, –ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ –æ–ø—Ä–æ—Å–∞—Ö –∏ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã —Å–ø–∏–∫–µ—Ä–∞–º.

–î–ª—è –Ω–∞—á–∞–ª–∞ –¥–∞–≤–∞–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏–º –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å!`;

    await ctx.reply(welcomeMessage);

    // Check if user already has a profile
    const existingProfile = await UserProfile.findOne({
      telegramId: ctx.from.id,
    });
    if (existingProfile && existingProfile.conference) {
      // await ctx.reply(`‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ ${existingProfile.conference}`);
      await ctx.reply(
        `‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ ${existingProfile.conference}`,
        Markup.inlineKeyboard([
          [
            Markup.button.callback(
              "üö™ –í—ã–π—Ç–∏ –∏–∑ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏",
              "leave_conference"
            ),
          ],
        ])
      );

      await showMainMenu(ctx);
      return;
    }
    // Create user profile if not exists
    if (!existingProfile) {
      await UserProfile.create({
        telegramId: ctx.from.id,
        firstName: ctx.from.first_name,
        lastName: ctx.from.last_name,
        username: ctx.from.username,
        isActive: true,
        conference: null,
        isAdmin: false,
        interests: [],
        offerings: [],
        lookingFor: [],
        contacts: { phone: "", email: "", telegram: "", vkontakte: "" },
        photo: "",
      });
    }

    // Show conference selection
    await ctx.reply(
      "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ —ç—Ç–∏—Ö –ø—É–±–ª–∏—á–Ω—ã—Ö –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–π:",
      await conferenceKeyboard()
    );
  });

  // Conference selection
  bot.action(/conference_(.+)_(.+)/, async (ctx) => {
    const conference = ctx.match[1];
    const conferenceName = ctx.match[2];
    await ctx.answerCbQuery();
    console.log("–ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è –≤—ã–±—Ä–∞–Ω–∞:", conferenceName);

    if (!ctx.session) ctx.session = {};

    await UserProfile.findOneAndUpdate(
      { telegramId: ctx.from.id },
      {
        telegramId: ctx.from.id,
        firstName: ctx.from.first_name,
        lastName: ctx.from.last_name,
        username: ctx.from.username,
        conference: conferenceName,
      },
      { upsert: true }
    );

    await ctx.reply(`‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ ${conferenceName}`);
    await showMainMenu(ctx);
  });

  bot.action("leave_conference", async (ctx) => {
    try {
      // remove user from conference in DB
      await UserProfile.findOneAndUpdate(
        { telegramId: ctx.from.id },
        { $set: { conference: "" } }
      );

      await ctx.editMessageText(
        "üö™ –í—ã –ø–æ–∫–∏–Ω—É–ª–∏ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—é. –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ —ç—Ç–∏—Ö –ø—É–±–ª–∏—á–Ω—ã—Ö –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–π.",
        await conferenceKeyboard(ctx)
      );
    } catch (err) {
      console.error(err);
      await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏.");
    }
  });

  // ============ PROFILE MANAGEMENT ============
  bot.hears("üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", async (ctx) => {
    const profile = await UserProfile.findOne({ telegramId: ctx.from.id });
    if (!profile) {
      await ctx.reply(
        "–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å."
      );
      return;
    }
    await showProfile(ctx, profile);
  });

  // Profile editing commands
  const profileActions = {
    "üì∏ –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ": {
      waitingFor: "photo",
      message: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —Å–≤–æ—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é:",
    },

    "üéØ –ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—ã": {
      waitingFor: "interests",
      message: "–ü–µ—Ä–µ—á–∏—Å–ª–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):",
    },
    "üíº –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è": {
      waitingFor: "offerings",
      message: "–ß—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å? (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):",
    },
    "üîç –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫": {
      waitingFor: "lookingFor",
      message: "–ß—Ç–æ –≤—ã –∏—â–µ—Ç–µ? (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):",
    },
  };

  Object.entries(profileActions).forEach(
    ([action, { waitingFor, message }]) => {
      bot.hears(action, async (ctx) => {
        if (!ctx.session) ctx.session = {};
        ctx.session.waitingFor = waitingFor;
        await ctx.reply(message, backKeyboard());
      });
    }
  );

  // Edit contacts ========
  bot.hears("üìû –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã", async (ctx) => {
    await ctx.reply(
      "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:",
      Markup.inlineKeyboard([
        [Markup.button.callback("üì± –¢–µ–ª–µ—Ñ–æ–Ω", "edit_phone")],
        [Markup.button.callback("‚úâÔ∏è Email", "edit_email")],
        [Markup.button.callback("üí¨ Telegram", "edit_telegram")],
        [Markup.button.callback("üîó Vkontakte", "edit_vkontakt")],
      ])
    );
  });

  bot.action("edit_phone", async (ctx) => {
    ctx.session.waitingFor = "phone";
    await ctx.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:");
  });

  bot.action("edit_email", async (ctx) => {
    ctx.session.waitingFor = "email";
    await ctx.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π Email:");
  });

  bot.action("edit_telegram", async (ctx) => {
    ctx.session.waitingFor = "telegram";
    await ctx.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π Telegram:");
  });

  bot.action("edit_vkontakt", async (ctx) => {
    ctx.session.waitingFor = "vkontakte";
    await ctx.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π Vkontakte:");
  });

  // ============ NETWORKING ============
  bot.hears("üîç –ù–∞–π—Ç–∏ –ª—é–¥–µ–π", async (ctx) => {
    const userProfile = await UserProfile.findOne({ telegramId: ctx.from.id });

    if (!userProfile) {
      await ctx.reply("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å —Å –ø–æ–º–æ—â—å—é /start");
      return;
    }

    const matches = await findMatches(ctx.from.id, userProfile.conference);

    if (matches.length === 0) {
      await ctx.reply(
        "–ü–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ó–∞–π–¥–∏—Ç–µ –ø–æ–∑–∂–µ!"
      );
      return;
    }

    // Sort by match score
    matches.sort((a, b) => {
      const scoreA = calculateMatchScore(userProfile, a);
      const scoreB = calculateMatchScore(userProfile, b);
      return scoreB - scoreA;
    });

    await ctx.reply(`Found ${matches.length} potential matches:`);

    for (const match of matches.slice(0, 10)) {
      // Show top 5 matches
      const matchScore = calculateMatchScore(userProfile, match);
      await showUserProfile(ctx, match, matchScore);
    }
  });

  bot.hears("ü§ù –ú–æ–∏ —Å–≤—è–∑–∏", async (ctx) => {
    const connections = await Connection.find({
      $or: [{ user1: ctx.from.id }, { user2: ctx.from.id }],
      status: "accepted",
    });

    if (connections.length === 0) {
      await ctx.reply("No connections yet.");
      return;
    }

    await ctx.reply(`Your connections (${connections.length}):`);
    for (const connection of connections) {
      const otherUserId =
        connection.user1 === ctx.from.id ? connection.user2 : connection.user1;
      const otherUser = await UserProfile.findOne({ telegramId: otherUserId });
      if (otherUser) {
        await ctx.reply(
          `‚úÖ ${otherUser.firstName} ${otherUser.lastName || ""} (@${
            otherUser.username || "N/A"
          })`
        );
      }
    }
  });

  bot.hears("‚≠ê –ò–∑–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏", async (ctx) => {
    const userProfile = await UserProfile.findOne({ telegramId: ctx.from.id });
    const featuredUsers = await UserProfile.find({
      telegramId: { $ne: ctx.from.id },
      conference: userProfile?.conference,
      isActive: true,
    }).limit(3);

    if (featuredUsers.length === 0) {
      await ctx.reply("No featured profiles yet.");
      return;
    }

    await ctx.reply("‚≠ê Featured Profiles:");
    for (const user of featuredUsers) {
      await showUserProfile(ctx, user);
    }
  });

  // ============ POLLS ============
  bot.hears("üìä –ê–∫—Ç–∏–≤–Ω—ã–µ –æ–ø—Ä–æ—Å—ã", async (ctx) => {
    const userProfile = await UserProfile.findOne({ telegramId: ctx.from.id });
    const polls = await Poll.find({
      conference: userProfile?.conference,
      isActive: true,
    });

    if (polls.length === 0) {
      await ctx.reply("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø—Ä–æ—Å–æ–≤.");
      return;
    }

    for (const poll of polls) {
      await showPoll(ctx, poll);
    }
  });

  // ============ QUESTIONS ============
  bot.hears("‚ùì –°–ø—Ä–æ—Å–∏—Ç–µ —Å–ø–∏–∫–µ—Ä–∞", async (ctx) => {
    if (!ctx.session) ctx.session = {};
    ctx.session.waitingFor = "speaker_name";
    await ctx.reply("–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Å–ø–∏–∫–µ—Ä–∞:");
  });

  // ============ BACK BUTTON ============
  bot.hears("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é", async (ctx) => {
    if (ctx.session) {
      ctx.session.waitingFor = null;
      ctx.session.speakerName = null;
    }
    await showMainMenu(ctx);
  });

  // =========== Admin panel Start ===========
  bot.hears("üõ†Ô∏è –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", async (ctx) => {
    const user = await UserProfile.findOne({ telegramId: ctx.from.id });
    if (!user || !user.isAdmin) {
      await ctx.reply("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Å—Ç—É–ø –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞");
      return;
    }
    await ctx.reply("Options", adminKeyboard());
  });

  // ============ CHAT ============
  bot.hears("üí¨ –ú–æ–∏ —á–∞—Ç—ã", async (ctx) => {
    const connections = await Connection.find({
      $or: [{ user1: ctx.from.id }, { user2: ctx.from.id }],
      status: "accepted",
    });

    if (connections.length === 0) {
      await ctx.reply("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤.");
      return;
    }

    for (const connection of connections) {
      const otherUserId =
        connection.user1 === ctx.from.id ? connection.user2 : connection.user1;
      const otherUser = await UserProfile.findOne({ telegramId: otherUserId });

      let message = `üí¨ –ß–∞—Ç —Å ${otherUser.firstName}\n`;
      if (connection.lastMessage) {
        message += `–ü–æ—Å–ª–µ–¥–Ω–∏–π: ${connection.lastMessage.text.substring(
          0,
          30
        )}...\n`;
      }
      if (connection.unreadCount > 0) {
        message += `üì® ${connection.unreadCount} –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö`;
      }

      await ctx.reply(
        message,
        Markup.inlineKeyboard([
          Markup.button.callback("–û—Ç–∫—Ä—ã—Ç—ã–π —á–∞—Ç", `open_chat_${otherUserId}`),
        ])
      );
    }
  });

  // ============ ADMIN FEATURES ============
  bot.command("admin", async (ctx) => {
    const user = await UserProfile.findOne({ telegramId: ctx.from.id });
    if (!user || !user.isAdmin) {
      await ctx.reply("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Å—Ç—É–ø –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞");
      return;
    }
    await ctx.reply("üõ†Ô∏è –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", adminKeyboard());
  });

  bot.hears("üìä –°–æ–∑–¥–∞—Ç—å –æ–ø—Ä–æ—Å", async (ctx) => {
    const user = await UserProfile.findOne({ telegramId: ctx.from.id });
    if (!user || !user.isAdmin) return;

    ctx.session.waitingFor = "admin_poll_question";
    ctx.session.newPoll = { options: [], conference: user.conference };

    await ctx.reply("–í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –æ–ø—Ä–æ—Å–∞:");
  });

  bot.hears("üè¢ –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—é", async (ctx) => {
    const user = await UserProfile.findOne({ telegramId: ctx.from.id });
    if (!user || !user.isAdmin) return;

    ctx.session.waitingFor = "admin_conference_name";
    await ctx.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏:");
  });

  // bot.hears("üîë Generate QR Code", async (ctx) => {
  //   const user = await UserProfile.findOne({ telegramId: ctx.from.id });
  //   if (!user || !user.isAdmin) return;

  //   await generateQRCode(ctx);
  // });

  bot.hears("üîë –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å QR-–∫–æ–¥", async (ctx) => {
    const user = await UserProfile.findOne({ telegramId: ctx.from.id });
    if (!user || !user.isAdmin) return;

    // 1. Get all conferences
    const conferences = await Conference.find();

    if (conferences.length === 0) {
      return ctx.reply("‚ùå –ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.");
    }

    // 2. Show them as inline buttons
    const buttons = conferences.map((c) => [
      Markup.button.callback(c.name, `generate_qr_${c._id}`),
    ]);

    await ctx.reply("üìå –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—é:", Markup.inlineKeyboard(buttons));
  });

  bot.hears("üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞–º–∏", async (ctx) => {
    const user = await UserProfile.findOne({ telegramId: ctx.from.id });
    if (!user || !user.isAdmin) return;

    const questions = await Question.find({
      conference: user.conference,
      isAnswered: false,
    }).limit(10);

    if (questions.length === 0) {
      await ctx.reply("–ù–µ—Ç –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.");
      return;
    }

    for (const question of questions) {
      await ctx.reply(
        `‚ùì –û—Ç: ${question.askedByName}\n–ö:${question.speaker}\–í–æ–ø—Ä–æ—Å: ${question.question}`,
        Markup.inlineKeyboard([
          Markup.button.callback("–û—Ç–≤–µ—á–∞—Ç—å", `admin_answer_${question._id}`),
        ])
      );
    }
  });

  bot.hears("üìã –°–ø–∏—Å–æ–∫ –æ–ø—Ä–æ—Å–æ–≤", async (ctx) => {
    const user = await UserProfile.findOne({ telegramId: ctx.from.id });
    if (!user || !user.isAdmin) return;

    const pollsList = await Poll.find({
      isActive: true,
      conference: user.conference,
    });

    if (!pollsList || pollsList.length === 0) {
      await ctx.reply("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–ø—Ä–æ—Å–æ–≤.");
      return;
    }

    for (const poll of pollsList) {
      const optionsText = poll.options
        .map((cVal, idx) => `‚Ä¢ ${cVal.text}(${cVal.votes})`)
        .join("\n");

      await ctx.reply(
        `–í–æ–ø—Ä–æ—Å: ${poll.question}\n` +
          `–ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è: ${poll.conference}\n\n` +
          `–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:\n${optionsText}`,
        Markup.inlineKeyboard([
          [
            Markup.button.callback("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", `poll_edit_${poll._id}`),
            Markup.button.callback("üóë –£–¥–∞–ª–∏—Ç—å", `poll_delete_${poll._id}`),
          ],
        ])
      );
    }
  });

  bot.hears("üìã –°–ø–∏—Å–æ–∫ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–π", async (ctx) => {
    const user = await UserProfile.findOne({ telegramId: ctx.from.id });
    if (!user || !user.isAdmin) return;

    const conferenceList = await Conference.find();

    if (!conferenceList || conferenceList.length === 0) {
      await ctx.reply("No conferences avaible.");
      return;
    }

    for (const conference of conferenceList) {
      await ctx.reply(
        `Name: ${conference.name}\n` +
          `IsPublic: ${conference.isPublic}\n\n` +
          `Code:${conference.code}\n` +
          `Is Active: ${conference.isActive}`,
        Markup.inlineKeyboard([
          [
            Markup.button.callback(
              "‚úèÔ∏è Edit",
              `conferenceList_edit_${conference._id}`
            ),
            Markup.button.callback(
              "üóë Delete",
              `conferenceList_delete_${conference._id}`
            ),
            conference.isActive
              ? Markup.button.callback(
                  "üö´ Deactivate",
                  `conferenceList_deactivate_${conference._id}`
                )
              : Markup.button.callback(
                  "‚úÖ Activate",
                  `conferenceList_activate_${conference._id}`
                ),
          ],
        ])
      );
    }
  });

  // ============ QR CODE HANDLING ============
  async function generateQRCode(ctx, conferenceId) {
    try {
      const user = await UserProfile.findOne({ telegramId: ctx.from.id });
      const conference = await Conference.findOne({ _id: conferenceId });

      if (!conference) {
        await ctx.reply("‚ùå –ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
        return;
      }

      const accessCode = new AccessCode({
        conference: conference.code,
        code: generateAccessCode(),
        createdBy: ctx.from.id,
        expiresAt: new Date(Date.now() + 24 * 60 * 60 * 1000),
      });

      await accessCode.save();

      const qrData = `https://t.me/${ctx.botInfo.username}?start=join_${conference.code}_${accessCode.code}`;
      const qrImage = await QRCode.toBuffer(qrData);

      await ctx.replyWithPhoto(
        { source: qrImage },
        {
          caption: `üì≤ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è ${conference.name}\n–ö–æ–¥: ${
            accessCode.code
          }\n–ò—Å—Ç–µ–∫–∞–µ—Ç: ${accessCode.expiresAt.toLocaleDateString()}`,
        }
      );
    } catch (error) {
      console.error("QR code error:", error);
      await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞");
    }
  }

  async function handleJoinConference(ctx, conferenceCode, accessCode) {
    try {
      const code = await AccessCode.findOne({
        code: accessCode,
        isUsed: false,
      });
      if (!code || code.conference !== conferenceCode) {
        await ctx.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞");
        return;
      }

      const conference = await Conference.findOne({ code: conferenceCode });
      if (!conference) {
        await ctx.reply("‚ùå –ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
        return;
      }

      await UserProfile.findOneAndUpdate(
        { telegramId: ctx.from.id },
        {
          telegramId: ctx.from.id,
          firstName: ctx.from.first_name,
          lastName: ctx.from.last_name,
          username: ctx.from.username,
          conference: conference.name,
        },
        { upsert: true }
      );

      code.isUsed = true;
      code.usedBy = ctx.from.id;
      await code.save();

      await ctx.reply(`‚úÖ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è ${conference.name}!`);
      await showMainMenu(ctx);
    } catch (error) {
      console.error("Join error:", error);
      await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏");
    }
  }

  // ============ TEXT HANDLER ============

  bot.on("text", async (ctx) => {
    if (!ctx.session || !ctx.session.waitingFor) return;

    const text = ctx.message.text;
    const waitingFor = ctx.session.waitingFor;

    if (text === "‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é") {
      ctx.session.waitingFor = null;
      ctx.session.chatWith = null;
      await showMainMenu(ctx);
      return;
    }

    // Profile editing
    else if (["interests", "offerings", "lookingFor","phone", "email", "telegram", "vkontakte"].includes(waitingFor)) {
      await handleProfileInput(ctx, waitingFor, text);
    }
    // Questions
    else if (waitingFor === "speaker_name") {
      ctx.session.speakerName = text;
      ctx.session.waitingFor = "question";
      await ctx.reply("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å:");
    } else if (waitingFor === "question") {
      await handleQuestionInput(ctx, text);
    }
    // Admin features
    else if (waitingFor === "admin_poll_question") {
      ctx.session.newPoll.question = ctx.message.text;
      ctx.session.waitingFor = "create_poll_option";

      await ctx.reply("‚ûï –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –ø–µ—Ä–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç —Ç–µ–∫—Å—Ç–∞:");
      // await handleAdminPoll(ctx, text);
    } else if (waitingFor === "admin_conference_name") {
      await handleAdminConference(ctx, text);
    } else if (ctx.session?.waitingFor === "create_poll_option") {
      const newOption = ctx.message.text;
      ctx.session.newPoll.options.push({ text: newOption });

      await ctx.reply(
        "‚úÖ –í–∞—Ä–∏–∞–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω.\n–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç?",
        {
          ...Markup.inlineKeyboard(
            ctx.session.newPoll.options.length < 5
              ? [
                  [Markup.button.callback("‚ûï –î–∞", "add_more_option")],
                  [
                    Markup.button.callback(
                      "‚úÖ –ó–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å",
                      "finish_poll_creation"
                    ),
                  ],
                ]
              : [
                  [
                    Markup.button.callback(
                      "‚úÖ –ó–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å",
                      "finish_poll_creation"
                    ),
                  ],
                ]
          ),
        }
      );
    }

    // Chat
    else if (waitingFor === "chat_message" && ctx.session.chatWith) {
      if (ctx.message.text === "/cancel") {
        ctx.session.waitingFor = null;
        ctx.session.chatWith = null;
        await ctx.reply("–ß–∞—Ç –æ—Ç–º–µ–Ω–µ–Ω.");
        return;
      }
      await sendChatMessage(ctx, ctx.session.chatWith, text);
    }

    // Poll editing
    else if (waitingFor === "edit_poll_question") {
      const pollId = ctx.session.editPollId;
      const newQuestion = ctx.message.text;

      await Poll.findByIdAndUpdate(pollId, { question: newQuestion });

      ctx.session.waitingFor = null;
      ctx.session.editPollId = null;

      await ctx.reply("‚úÖ –û–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!");
    }

    // Conference editing
    else if (waitingFor === "edit_conference_name") {
      const conferenceId = ctx.session.editConferenceId;
      const newName = ctx.message.text;
      await Conference.findByIdAndUpdate(conferenceId, { name: newName });
      ctx.session.waitingFor = null;
      ctx.session.editConferenceId = null;
      await ctx.reply("‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!");
    }

    // Handle poll question edit
    else if (waitingFor === "edit_poll_question") {
      const pollId = ctx.session.editPollId;
      const newQuestion = ctx.message.text;

      await Poll.findByIdAndUpdate(pollId, { question: newQuestion });

      ctx.session.waitingFor = null;
      ctx.session.editPollId = null;

      await ctx.reply("‚úÖ –í–æ–ø—Ä–æ—Å –æ–ø—Ä–æ—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω!");
    }

    // Handle adding new poll option
    else if (waitingFor === "add_poll_option") {
      const pollId = ctx.session.editPollId;
      const newOption = ctx.message.text;

      await Poll.findByIdAndUpdate(pollId, {
        $push: { options: { text: newOption } },
      });

      ctx.session.waitingFor = null;
      ctx.session.editPollId = null;

      await ctx.reply("‚úÖ –û–ø—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!");
    }

    // Handle choosing option number to edit
    else if (waitingFor === "edit_option_text") {
      const pollId = ctx.session.editPollId;
      const optionIndex = ctx.session.optionIndex;
      const newText = ctx.message.text;

      const poll = await Poll.findById(pollId);
      poll.options[optionIndex].text = newText;
      await poll.save();

      ctx.session.waitingFor = null;
      ctx.session.optionIndex = null;
      ctx.session.editPollId = null;

      await ctx.reply("‚úÖ –û–ø—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!");
    }

    // answering questions
    else if (waitingFor.match(/^adminQuest_answer_(\w+)$/)) {
      const match = waitingFor.match(/^adminQuest_answer_(\w+)$/);

      const questionId = match[1];
      const answerText = ctx.message.text;

      try {
        const question = await Question.findById(questionId);
        if (!question) {
          await ctx.reply("‚ùå –í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
          ctx.session.waitingFor = null;
          return;
        }

        // Save answer in DB
        question.answer = answerText;
        question.answeredBy = ctx.from.id;
        question.isAnswered = true;
        await question.save();

        // Notify the admin
        await ctx.reply("‚úÖ –û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!");

        // Optionally notify the user who asked the question
        if (question.askedBy) {
          try {
            await ctx.telegram.sendMessage(
              question.askedBy,
              `‚ùì *–í–∞—à –≤–æ–ø—Ä–æ—Å:*\n${question.question}\n\nüí° *–û—Ç–≤–µ—Ç:*\n${answerText}`,
              { parse_mode: "Markdown" }
            );
          } catch (err) {
            console.error("Failed to notify user:", err);
          }
        }
      } catch (err) {
        console.error("Answer save error:", err);
        await ctx.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç..");
      }

      ctx.session.waitingFor = null;
    }
  });

  // ============ ACTION HANDLERS ============
  bot.action(/connect_(\d+)/, async (ctx) => {
    const targetUserId = parseInt(ctx.match[1]);
    await handleConnection(ctx, targetUserId);
  });

  bot.action(/open_chat_(\d+)/, async (ctx) => {
    const targetUserId = parseInt(ctx.match[1]);
    ctx.session.chatWith = targetUserId;
    ctx.session.waitingFor = "chat_message";
    await ctx.reply("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (/cancel –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏):");
  });

  bot.action(/admin_answer_(\w+)/, async (ctx) => {
    const questionId = ctx.match[1];
    const user = await UserProfile.findOne({ telegramId: ctx.from.id });
    if (!user || !user.isAdmin) return;

    ctx.session.waitingFor = `adminQuest_answer_${questionId}`;
    await ctx.reply("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –æ—Ç–≤–µ—Ç:");
  });

  bot.action(/admin_deleteQeustion_(\w+)/, async (ctx) => {
    const questionId = ctx.match[1];
    const user = await UserProfile.findOne({ telegramId: ctx.from.id });
    if (!user || !user.isAdmin) return;
    await Question.findByIdAndDelete(questionId)
      .then(async () => {
        await ctx.answerCbQuery("–í–æ–ø—Ä–æ—Å —É–¥–∞–ª–µ–Ω ‚úÖ");
        await ctx.editMessageText("‚ùå –≠—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å –±—ã–ª —É–¥–∞–ª–µ–Ω..");
      })
      .catch(async (err) => {
        console.error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞:", err);
        await ctx.answerCbQuery("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞");
      });
  });

  bot.action(/vote_(\w+)_(\d+)/, async (ctx) => {
    const pollId = ctx.match[1];
    const optionIndex = parseInt(ctx.match[2]);
    await handleVote(ctx, pollId, optionIndex);
  });

  bot.action(/generate_qr_(\w+)/, async (ctx) => {
    const data = ctx.callbackQuery.data;

    if (data.startsWith("generate_qr_")) {
      const conferenceId = data.replace("generate_qr_", "");

      await ctx.answerCbQuery(); // remove loading spinner

      // Call your QR code generator with conferenceId
      await generateQRCode(ctx, conferenceId);
    }
  });

  // Admin poll management
  bot.action(/poll_delete_(.+)/, async (ctx) => {
    const pollId = ctx.match[1];
    await Poll.findByIdAndDelete(pollId);
    await ctx.answerCbQuery("–û–ø—Ä–æ—Å —É–¥–∞–ª–µ–Ω ‚úÖ");
    await ctx.editMessageText("‚ùå –≠—Ç–æ—Ç –æ–ø—Ä–æ—Å –±—ã–ª —É–¥–∞–ª–µ–Ω.");
  });

  // Handle poll edit (step 1: ask for new question)
  bot.action(/poll_edit_(.+)/, async (ctx) => {
    const pollId = ctx.match[1];
    ctx.session.editPollId = pollId;

    await ctx.answerCbQuery();
    await ctx.reply(
      "‚öôÔ∏è –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å??",
      Markup.inlineKeyboard([
        [
          Markup.button.callback(
            "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å",
            `edit_question_${pollId}`
          ),
        ],
        [
          Markup.button.callback(
            "üìù –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
            `edit_options_${pollId}`
          ),
        ],
        [Markup.button.callback("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç", `add_option_${pollId}`)],
      ])
    );
  });

  bot.action(/edit_question_(.+)/, async (ctx) => {
    const pollId = ctx.match[1];
    ctx.session.waitingFor = "edit_poll_question";
    ctx.session.editPollId = pollId;

    await ctx.answerCbQuery();
    await ctx.reply("‚úèÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å:");
  });

  bot.action(/add_option_(.+)/, async (ctx) => {
    const pollId = ctx.match[1];
    ctx.session.waitingFor = "add_poll_option";
    ctx.session.editPollId = pollId;

    await ctx.answerCbQuery();
    await ctx.reply("‚ûï –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞:");
  });

  bot.action(/edit_options_(.+)/, async (ctx) => {
    const pollId = ctx.match[1];
    ctx.session.editPollId = pollId;

    const poll = await Poll.findById(pollId);
    if (!poll) return ctx.reply("‚ùå –û–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.");

    let optionsText = poll.options
      .map((opt, i) => `${i + 1}. ${opt.text}`)
      .join("\n");

    ctx.session.waitingFor = "choose_option_number";

    await ctx.answerCbQuery();
    await ctx.reply(
      `üìù –¢–µ–∫—É—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:\n${optionsText}\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –Ω–æ–º–µ—Ä –≤–∞—Ä–∏–∞–Ω—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å:`
    );
  });

  // Handle choosing option number to edit
  bot.action("add_more_option", async (ctx) => {
    ctx.session.waitingFor = "create_poll_option";
    await ctx.answerCbQuery();
    await ctx.reply("‚ûï –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ç–µ–∫—Å—Ç —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞:");
  });

  // Finish poll creation
  bot.action("finish_poll_creation", async (ctx) => {
    await ctx.answerCbQuery();

    const { question, options } = ctx.session.newPoll || {};

    if (!question || !options || options.length < 2) {
      return ctx.reply(
        "‚ùå –û–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏ –∫–∞–∫ –º–∏–Ω–∏–º—É–º 2 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞.."
      );
    }

    // Call your handleAdminPoll function, but pass options instead of default Yes/No
    await handleAdminPoll(ctx, question, options);

    ctx.session.waitingFor = null;
    ctx.session.newPoll = null;
  });

  // Admin conference management
  bot.action(/conferenceList_delete_(.+)/, async (ctx) => {
    const conferenceId = ctx.match[1];
    await Conference.findByIdAndDelete(conferenceId);
    await ctx.answerCbQuery("–ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞ ‚úÖ");
    await ctx.editMessageText("‚ùå –≠—Ç–∞ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞.");
  });

  bot.action(/conferenceList_deactivate_(.+)/, async (ctx) => {
    const conferenceId = ctx.match[1];
    await Conference.findByIdAndUpdate(conferenceId, { isActive: false });
    await ctx.answerCbQuery("–ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ ‚úÖ");
    await ctx.editMessageText("üö´ –≠—Ç–∞ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è –±—ã–ª–∞ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞..");
  });

  bot.action(/conferenceList_activate_(.+)/, async (ctx) => {
    const conferenceId = ctx.match[1];
    await Conference.findByIdAndUpdate(conferenceId, { isActive: true });
    await ctx.answerCbQuery("–ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ ‚úÖ");
    await ctx.editMessageText("‚úÖ –≠—Ç–∞ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è –±—ã–ª–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.");
  });

  bot.action(/conferenceList_edit_(.+)/, async (ctx) => {
    const conferenceId = ctx.match[1];
    ctx.session.waitingFor = "edit_conference_name";
    ctx.session.editConferenceId = conferenceId;
    await ctx.answerCbQuery();
    await ctx.reply("‚úèÔ∏è –ü—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–π –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏:");
  });

  // ============ PHOTO HANDLER ============
  bot.on("photo", async (ctx) => {
    if (!ctx.session || ctx.session.waitingFor !== "photo") return;

    try {
      const photo = ctx.message.photo[ctx.message.photo.length - 1];
      await UserProfile.findOneAndUpdate(
        { telegramId: ctx.from.id },
        { photo: photo.file_id },
        { upsert: true }
      );

      await ctx.reply("‚úÖ –§–æ—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!");
      ctx.session.waitingFor = null;
      await showMainMenu(ctx);
    } catch (error) {
      console.error("Photo error:", error);
      await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ");
    }
  });
};

// // ============ HELPER FUNCTIONS ============
// async function handleProfileInput(ctx, waitingFor, text) {
//   try {
//     let updateData = {};

//     if (waitingFor === "contacts") {

//       const contacts = {};
//   text.split("\n").forEach((line) => {
//     const idx = line.indexOf(":");
//     if (idx !== -1) {
//       const key = line.substring(0, idx).trim().toLowerCase();
//       const value = line.substring(idx + 1).trim();
//       if (key && value) contacts[key] = value;
//     }
//   });

//     } else {
//       updateData[waitingFor] = text
//         .split(",")
//         .map((s) => s.trim())
//         .filter((s) => s);
//     }

//     await UserProfile.findOneAndUpdate(
//       { telegramId: ctx.from.id },
//       updateData,
//       { upsert: true }
//     );

//     await ctx.reply("‚úÖ Updated!");
//     ctx.session.waitingFor = null;
//     await showMainMenu(ctx);
//   } catch (error) {
//     console.error("Profile error:", error);
//     await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è");
//   }
// }

// ============ HELPER FUNCTIONS ============
async function handleProfileInput(ctx, waitingFor, text) {
  try {
    let updateData = {};

    if (
      ["phone", "email", "telegram", "vkontakte"].includes(waitingFor)) {
      updateData[`contacts.${waitingFor}`] = text.trim();
    } else {
      updateData[waitingFor] = text
        .split(",")
        .map((s) => s.trim())
        .filter((s) => s);
    }

    await UserProfile.findOneAndUpdate(
      { telegramId: ctx.from.id },
      { $set: updateData }, // ‚úÖ ensures it updates the right fields
      { upsert: true, new: true }
    );

    await ctx.reply("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ!");
    ctx.session.waitingFor = null;
    await showMainMenu(ctx);
  } catch (error) {
    console.error("Profile error:", error);
    await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è");
  }
}

async function handleQuestionInput(ctx, text) {
  try {
    const userProfile = await UserProfile.findOne({ telegramId: ctx.from.id });
    const question = new Question({
      speaker: ctx.session.speakerName,
      question: text,
      askedBy: ctx.from.id,
      askedByName: `${userProfile.firstName} ${userProfile.lastName || ""}`,
      conference: userProfile.conference,
    });

    await question.save();
    await ctx.reply("‚úÖ –í–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!");

    const admins = await UserProfile.find({
      conference: userProfile.conference,
      isAdmin: true,
    });

    for (const admin of admins) {
      try {
        await ctx.telegram.sendMessage(
          admin.telegramId,
          `‚ùì *–ü–æ–ª—É—á–µ–Ω –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å*\n\n${text}`,
          {
            parse_mode: "Markdown",
            reply_markup: {
              inline_keyboard: [
                [
                  {
                    text: "üí¨ –û—Ç–≤–µ—á–∞—Ç—å",
                    callback_data: `admin_answer_${question._id}`,
                  },
                  {
                    text: "‚ùå –£–¥–∞–ª–∏—Ç—å",
                    callback_data: `admin_deleteQeustion_${question._id}`,
                  },
                ],
              ],
            },
          }
        );
      } catch (err) {
        console.error("Admin notify error:", err);
      }
    }

    ctx.session.waitingFor = null;
    ctx.session.speakerName = null;
  } catch (error) {
    console.error("Question error:", error);
    await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–∞");
  }
}

async function handleAdminPoll(ctx, question, options = null) {
  try {
    const user = await UserProfile.findOne({ telegramId: ctx.from.id });

    const poll = new Poll({
      question,
      conference: user.conference,
      createdBy: ctx.from.id,
      options: options || [{ text: "Yes" }, { text: "No" }], // fallback
    });

    await poll.save();
    ctx.session.waitingFor = null;

    // Notify all users in the conference
    const users = await UserProfile.find({ conference: user.conference });
    for (const u of users) {
      try {
        await ctx.telegram.sendMessage(
          u.telegramId,
          `üìä *–ù–æ–≤—ã–π –æ–ø—Ä–æ—Å:*\n${question}`,
          {
            parse_mode: "Markdown",
            ...Markup.inlineKeyboard(
              poll.options.map((opt, idx) => [
                Markup.button.callback(opt.text, `vote_${poll._id}_${idx}`),
              ])
            ),
          }
        );
      } catch (error) {
        console.error("Poll send error:", error);
      }
    }

    await ctx.reply("‚úÖ –û–ø—Ä–æ—Å —Å–æ–∑–¥–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!");
  } catch (error) {
    console.error("Admin poll error:", error);
    await ctx.reply("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø—Ä–æ—Å–∞");
  }
}

async function handleAdminConference(ctx, name) {
  try {
    const code = generateConferenceCode();
    const conference = new Conference({
      name,
      code,
      createdBy: ctx.from.id,
      isPublic: true,
    });

    await conference.save();
    ctx.session.waitingFor = null;
    await ctx.reply(`‚úÖ –ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞!\n–ö–æ–¥: ${code}\n–ò–º—è: ${name}`);
  } catch (error) {
    console.error("Conference error:", error);
    await ctx.reply("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏");
  }
}

async function handleConnection(ctx, targetUserId) {
  try {
    const existing = await Connection.findOne({
      $or: [
        { user1: ctx.from.id, user2: targetUserId },
        { user1: targetUserId, user2: ctx.from.id },
      ],
    });

    if (existing) {
      await ctx.reply("–£–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∏–ª–∏ –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.");
      return;
    }

    const connection = new Connection({
      user1: ctx.from.id,
      user2: targetUserId,
      conference: (await UserProfile.findOne({ telegramId: ctx.from.id }))
        ?.conference,
    });

    await connection.save();

    const requester = await UserProfile.findOne({ telegramId: ctx.from.id });
    await ctx.telegram.sendMessage(
      targetUserId,
      `ü§ù ${requester.firstName} —Ö–æ—á–µ—Ç –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è!`,
      Markup.inlineKeyboard([
        Markup.button.callback("‚úÖ –ü—Ä–∏–Ω–∏–º–∞—Ç—å", `connect_${ctx.from.id}`),
        Markup.button.callback("‚ùå –û—Ç–∫–ª–æ–Ω—è—Ç—å", `reject_${ctx.from.id}`),
      ])
    );

    await ctx.reply("–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!");
  } catch (error) {
    console.error("Connection error:", error);
    await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞");
  }
}

async function sendChatMessage(ctx, receiverId, text) {
  try {
    let connection = await Connection.findOne({
      $or: [
        { user1: ctx.from.id, user2: receiverId },
        { user1: receiverId, user2: ctx.from.id },
      ],
    });

    if (!connection) {
      connection = new Connection({
        user1: ctx.from.id,
        user2: receiverId,
        status: "accepted",
      });
    }

    const message = new Message({
      connectionId: connection._id,
      sender: ctx.from.id,
      receiver: receiverId,
      text: text,
    });

    await message.save();
    connection.lastMessage = {
      text,
      timestamp: new Date(),
      sender: ctx.from.id,
    };
    connection.unreadCount += 1;
    await connection.save();

    const sender = await UserProfile.findOne({ telegramId: ctx.from.id });
    await ctx.telegram.sendMessage(
      receiverId,
      `üí¨ –û—Ç ${sender.firstName}:\n${text}`,
      Markup.inlineKeyboard([
        Markup.button.callback("–û—Ç–≤–µ—á–∞—Ç—å", `open_chat_${ctx.from.id}`),
      ])
    );

    await ctx.reply("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!");
    ctx.session.waitingFor = null;
    ctx.session.chatWith = null;
  } catch (error) {
    console.error("Chat error:", error);
    await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è");
  }
}

async function handleVote(ctx, pollId, optionIndex) {
  try {
    const poll = await Poll.findById(pollId);
    if (!poll || !poll.isActive) {
      await ctx.reply("–û–ø—Ä–æ—Å –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω.");
      return;
    }

    if (poll.options.some((opt) => opt.voters.includes(ctx.from.id))) {
      await ctx.reply("–£–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏.");
      return;
    }

    poll.options[optionIndex].votes++;
    poll.options[optionIndex].voters.push(ctx.from.id);
    await poll.save();

    await ctx.reply("‚úÖ –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ!");
    await showPollResults(ctx, poll);
  } catch (error) {
    console.error("Vote error:", error);
    await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è");
  }
}

// ============ DISPLAY FUNCTIONS ============
async function showMainMenu(ctx) {
  const user = await UserProfile.findOne({ telegramId: ctx.from.id });
  const keyboard = user.isAdmin ? adminMainKeyboard() : mainKeyboard();

  await ctx.reply(`–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:`, keyboard);
}

async function showProfile(ctx, profile) {
  let message = `üë§ *–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å*\n\n`;
  message += `*–ò–º—è:* ${escapeMarkdown(profile.firstName)} ${escapeMarkdown(
    profile.lastName || ""
  )}\n`;
  message += `*–ù–∏–∫:* @${escapeMarkdown(profile.username || "N/A")}\n`;
  message += `*–ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è:* ${escapeMarkdown(
    profile.conference || "Not set"
  )}\n\n`;
  message += `*–¢–∏–ø:* ${profile.isAdmin ? "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä" : "–£—á–∞—Å—Ç–Ω–∏–∫"}\n\n`;

  await ctx.reply(message, { parse_mode: "Markdown" });

  if (profile.photo) {
    try {
      if (profile.photo.startsWith("AgAC")) {
        await ctx.replyWithPhoto(profile.photo, { caption: "–í–∞—à–µ —Ñ–æ—Ç–æ" });
      } else {
        await ctx.reply(`üì∏ –§–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è: ${profile.photo}`);
      }
    } catch (error) {
      await ctx.reply("üì∏ –§–æ—Ç–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ");
      console.error("Error sending photo:", error);
    }
  }

  console.log("Profile contacts:", profile.contacts);
  if (profile.contacts && Object.keys(profile.contacts).length > 0) {
    let contactsMsg = `*–ö–æ–Ω—Ç–∞–∫—Ç—ã:*\n`;

    if (profile.contacts.phone) {
      contactsMsg += `‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: ${escapeMarkdown(profile.contacts.phone)}\n`;
    }
    if (profile.contacts.email) {
      contactsMsg += `‚Ä¢ Email: ${escapeMarkdown(profile.contacts.email)}\n`;
    }
    if (profile.contacts.telegram) {
      contactsMsg += `‚Ä¢ Telegram: ${escapeMarkdown(
        profile.contacts.telegram
      )}\n`;
    }
    if (profile.contacts.vkontakte) {
      contactsMsg += `‚Ä¢ B–∫on—Ça–∫—Çe: ${escapeMarkdown(
        profile.contacts.vkontakte
      )}\n`;
    }

    await ctx.reply(contactsMsg, { parse_mode: "Markdown" });
  }

  const sections = [
    { title: "–ò–Ω—Ç–µ—Ä–µ—Å—ã", value: profile.interests },
    { title: "–Ø –º–æ–≥—É –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å", value: profile.offerings },
    { title: "–ù–∞—Ö–æ–¥—è—Å—å –≤ –ø–æ–∏—Å–∫–µ", value: profile.lookingFor },
  ];

  for (const section of sections) {
    if (section.value && section.value.length > 0) {
      const safeValues = section.value.map((v) => escapeMarkdown(v));
      await ctx.reply(`*${section.title}:* ${safeValues.join(", ")}`, {
        parse_mode: "Markdown",
      });
    }
  }

  await ctx.reply("–ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å??", profileKeyboard());
}

async function showUserProfile(ctx, user) {
  let message = `üë§ ${user.firstName} ${user.lastName || ""}\n`;
  message += `@${user.username || "N/A"}\n`;

  if (user.interests?.length)
    message += `–ò–Ω—Ç–µ—Ä–µ—Å—ã: ${user.interests.join(", ")}\n`;
  if (user.offerings?.length)
    message += `–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: ${user.offerings.join(", ")}\n`;
  if (user.lookingFor?.length)
    message += `–ù–∞—Ö–æ–¥—è—Å—å –≤ –ø–æ–∏—Å–∫–µ: ${user.lookingFor.join(", ")}\n`;

  try {
    if (user.photo?.startsWith("AgAC")) {
      await ctx.replyWithPhoto(user.photo, {
        caption: message,
        ...Markup.inlineKeyboard([
          Markup.button.callback("ü§ù –°–æ–µ–¥–∏–Ω—è—Ç—å", `connect_${user.telegramId}`),
        ]),
      });
    } else {
      await ctx.reply(
        message,
        Markup.inlineKeyboard([
          Markup.button.callback("ü§ù –°–æ–µ–¥–∏–Ω—è—Ç—å", `connect_${user.telegramId}`),
        ])
      );
    }
  } catch (error) {
    await ctx.reply(
      message,
      Markup.inlineKeyboard([
        Markup.button.callback("ü§ù –°–æ–µ–¥–∏–Ω—è—Ç—å", `connect_${user.telegramId}`),
      ])
    );
  }
}

async function showPoll(ctx, poll) {
  let message = `üìä ${poll.question}\n\n`;
  poll.options.forEach((opt, i) => {
    message += `${i + 1}. ${opt.text} (${opt.votes || 0} –≥–æ–ª–æ—Å–∞)\n`;
  });
  await ctx.reply(message, pollKeyboard(poll._id, poll.options));
}

async function showPollResults(ctx, poll) {
  const total = poll.options.reduce((sum, opt) => sum + (opt.votes || 0), 0);
  let message = `üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: ${poll.question}\n\n`;
  poll.options.forEach((opt, i) => {
    const percent =
      total > 0 ? (((opt.votes || 0) / total) * 100).toFixed(1) : 0;
    message += `${i + 1}. ${opt.text}: ${
      opt.votes || 0
    } –≥–æ–ª–æ—Å–∞ (${percent}%)\n`;
  });
  message += `\n–í—Å–µ–≥–æ: ${total} –≥–æ–ª–æ—Å–∞`;
  await ctx.reply(message);
}

// ============ UTILITY FUNCTIONS ============
function generateConferenceCode() {
  return Math.random().toString(36).substring(2, 8).toUpperCase();
}

function generateAccessCode() {
  return Math.random().toString(36).substring(2, 10).toUpperCase();
}

function escapeMarkdown(text) {
  return text?.toString().replace(/[_*[\]()~`]/g, "\\$&") || "";
}

module.exports = profileHandler;
